package {{ .Name }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"
  "github.com/vikstrous/go-swagger/errors"
  "github.com/vikstrous/go-swagger/swag"
  "github.com/vikstrous/go-swagger/client"
  "github.com/vikstrous/go-swagger/httpkit"
  "github.com/vikstrous/go-swagger/httpkit/validate"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// New creates a new {{ humanize .Name }} API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
  return &Client{transport: transport, formats: formats}
}

/*
{{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ .Description }}{{ end }}{{ else if .Description}}{{ .Description }}{{ else }}{{ pascalize .Name }} {{ humanize .Name }} API{{ end }}
*/
type Client struct {
  transport client.Transport
  formats strfmt.Registry
}

{{ range .Operations }}/*{{ if .Summary }}{{ .Summary }}{{ if .Description }}

{{ .Description }}{{ end }}{{ else if .Description}}{{ .Description }}{{ else }}{{ pascalize .Name }} {{ humanize .Name }} API{{ end }}
*/
func (a *Client) {{ pascalize .Name }}(params {{ pascalize .Name }}Params) {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}(*{{ .SuccessResponse.Schema.GoType }}, {{ end }}error{{ if .SuccessResponse.Schema }}){{ end }}{{ end }} {
  // TODO: Validate the params before sending

  {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}result{{ else }}_{{end}}{{ end }}, err := a.transport.Submit({{ printf "%q" .Name }}, &params, &{{ pascalize .Name }}Reader{formats: a.formats})
  if err != nil {
    return {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}nil, {{end}}{{ end }}err
  }
  return {{ if .SuccessResponse }}{{ if .SuccessResponse.Schema }}result.(*{{ .SuccessResponse.Schema.GoType }}), {{ end }}{{ end }}nil
}
{{ end }}

// NewAPIError creates a new API error
func NewAPIError(opName string, response interface{}, code int) APIError {
	return APIError{
		OperationName: opName,
		Response:      response,
		Code:          code,
	}
}

// APIError wraps an error model and captures the status code
type APIError struct {
	OperationName string
	Response       interface{}
	Code          int
}

func (a APIError) Error() string {
	return fmt.Sprintf("%s (status %d): %+v ", a.OperationName, a.Code, a.Response)
}

{{ define "clientresponse" }}/*
{{ if .Description }}{{ .Description }}{{else}}{{ pascalize .Name }} {{ humanize .Name }}{{end}}
*/
type {{ pascalize .Name }} struct {
  {{ range .Headers }}{{if .Description }}// {{ .Description }}{{ end }}
  {{ pascalize .Name }} {{ .GoType }}
  {{ end }}
  {{ if .Schema }}
  Payload {{ if .Schema.IsComplexObject }}*{{ end }}{{ .Schema.GoType }}
  {{ end }}
}

func ({{ .ReceiverName }} *{{ pascalize .Name }}) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {
  {{ range .Headers }}
  // response header {{.Name}}
  {{if .Converter}}{{ camelize .Name }}, err := {{.Converter}}(response.GetHeader("{{ .Name }}"))
  if err != nil {
    return errors.InvalidType({{ .Path }}, "header", "{{ .GoType }}", response.GetHeader("{{ .Name }}"))
  }
  {{ .ReceiverName }}.{{ pascalize .Name }} = {{ camelize .Name }}
  {{else}}{{ .ReceiverName }}.{{ pascalize .Name }} = response.GetHeader("{{ .Name }}")
  {{end}}
  {{ end }}
  {{ if .Schema }}
  // response payload
  {{ if .Schema.IsComplexObject }}
    {{ .ReceiverName }}.Payload = new({{ .Schema.GoType }})
  {{ end }}
  if err := consumer.Consume(response.Body(), {{ if not .Schema.IsComplexObject }}&{{ end }}{{ .ReceiverName }}.Payload); err != nil {
    return err
  }
  {{ end }}
  return nil
}
{{ end }}package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command


import (
  "net/http"
  "github.com/vikstrous/go-swagger/httpkit"
  "github.com/vikstrous/go-swagger/swag"
  "github.com/vikstrous/go-swagger/errors"
  "github.com/vikstrous/go-swagger/httpkit/validate"
  "github.com/vikstrous/go-swagger/client"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

type {{ pascalize .Name }}Reader struct {
  formats strfmt.Registry
}

func ({{ .ReceiverName }} *{{ pascalize .Name }}Reader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
  switch response.Code() {
  {{ range $key, $value := .Responses }}
    case {{ $key }}:
      var result {{ pascalize $value.Name }}
      if err := result.readResponse(response, consumer, {{ $.ReceiverName }}.formats); err != nil {
        return nil, err
      }
      return {{ if $value.IsSuccess }}&result, nil{{else}}nil, NewAPIError("{{ $value.Name }}", &result, response.Code()){{end}}
  {{end}}{{ if .DefaultResponse }}{{ with .DefaultResponse }}
    default:
      var result {{ pascalize .Name }}
      if err := result.readResponse(response, consumer, {{ $.ReceiverName }}.formats); err != nil {
        return nil, err
      }
      return {{ if .IsSuccess }}&result, nil{{else}}nil, NewAPIError("{{ .Name }}", &result, response.Code()){{end}}{{ end }}{{else}}
    default:
      return nil, NewAPIError("unknown error", nil, 0){{ end }}
  }
}

{{ range $key, $value := .Responses }}
{{ template "clientresponse" $value }}
{{ end }}
{{ if .DefaultResponse }}
{{ template "clientresponse" .DefaultResponse }}
{{ end }}

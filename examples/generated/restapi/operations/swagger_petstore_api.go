package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/vikstrous/go-swagger/httpkit"
	"github.com/vikstrous/go-swagger/httpkit/middleware"
	"github.com/vikstrous/go-swagger/httpkit/security"
	"github.com/vikstrous/go-swagger/spec"
	"github.com/vikstrous/go-swagger/strfmt"

	"github.com/vikstrous/go-swagger/examples/generated/models"
	"github.com/vikstrous/go-swagger/examples/generated/restapi/operations/pet"
	"github.com/vikstrous/go-swagger/examples/generated/restapi/operations/store"
	"github.com/vikstrous/go-swagger/examples/generated/restapi/operations/user"
)

// NewSwaggerPetstoreAPI creates a new SwaggerPetstore instance
func NewSwaggerPetstoreAPI(spec *spec.Document) *SwaggerPetstoreAPI {
	s := &SwaggerPetstoreAPI{
		spec:            spec,
		handlers:        make(map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
	}

	return s
}

// SwaggerPetstoreAPI This is a sample server Petstore server.
// [Learn about Swagger](http://swagger.wordnik.com) or join the IRC channel `#swagger` on irc.freenode.net.
// For this sample, you can use the api key `special-key` to test the authorization filters
type SwaggerPetstoreAPI struct {
	spec            *spec.Document
	context         *middleware.Context
	handlers        map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer httpkit.Consumer
	// XMLConsumer registers a consumer for a "application/xml" mime type
	XMLConsumer httpkit.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer httpkit.Producer
	// XMLProducer registers a producer for a "application/xml" mime type
	XMLProducer httpkit.Producer

	// APIKeyAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key apiKey provided in the header
	APIKeyAuth func(string) (*models.User, error)

	// AddPetHandler sets the operation handler for the add pet operation
	AddPetHandler pet.AddPetHandler

	// CreateUserHandler sets the operation handler for the create user operation
	CreateUserHandler user.CreateUserHandler

	// CreateUsersWithArrayInputHandler sets the operation handler for the create users with array input operation
	CreateUsersWithArrayInputHandler user.CreateUsersWithArrayInputHandler

	// LogoutUserHandler sets the operation handler for the logout user operation
	LogoutUserHandler user.LogoutUserHandler

	// UpdateUserHandler sets the operation handler for the update user operation
	UpdateUserHandler user.UpdateUserHandler

	// FindPetsByStatusHandler sets the operation handler for the find pets by status operation
	FindPetsByStatusHandler pet.FindPetsByStatusHandler

	// LoginUserHandler sets the operation handler for the login user operation
	LoginUserHandler user.LoginUserHandler

	// GetPetByIDHandler sets the operation handler for the get pet by i d operation
	GetPetByIDHandler pet.GetPetByIDHandler

	// GetOrderByIDHandler sets the operation handler for the get order by i d operation
	GetOrderByIDHandler store.GetOrderByIDHandler

	// GetUserByNameHandler sets the operation handler for the get user by name operation
	GetUserByNameHandler user.GetUserByNameHandler

	// DeletePetHandler sets the operation handler for the delete pet operation
	DeletePetHandler pet.DeletePetHandler

	// DeleteUserHandler sets the operation handler for the delete user operation
	DeleteUserHandler user.DeleteUserHandler

	// UpdatePetHandler sets the operation handler for the update pet operation
	UpdatePetHandler pet.UpdatePetHandler

	// CreateUsersWithListInputHandler sets the operation handler for the create users with list input operation
	CreateUsersWithListInputHandler user.CreateUsersWithListInputHandler

	// PlaceOrderHandler sets the operation handler for the place order operation
	PlaceOrderHandler store.PlaceOrderHandler

	// UpdatePetWithFormHandler sets the operation handler for the update pet with form operation
	UpdatePetWithFormHandler pet.UpdatePetWithFormHandler

	// FindPetsByTagsHandler sets the operation handler for the find pets by tags operation
	FindPetsByTagsHandler pet.FindPetsByTagsHandler

	// DeleteOrderHandler sets the operation handler for the delete order operation
	DeleteOrderHandler store.DeleteOrderHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)
}

// SetDefaultProduces sets the default produces media type
func (s *SwaggerPetstoreAPI) SetDefaultProduces(mediaType string) {
	s.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (s *SwaggerPetstoreAPI) SetDefaultConsumes(mediaType string) {
	s.defaultConsumes = mediaType
}

// DefaultProduces returns the default produces media type
func (s *SwaggerPetstoreAPI) DefaultProduces() string {
	return s.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (s *SwaggerPetstoreAPI) DefaultConsumes() string {
	return s.defaultConsumes
}

// Formats returns the registered string formats
func (s *SwaggerPetstoreAPI) Formats() strfmt.Registry {
	return s.formats
}

// RegisterFormat registers a custom format validator
func (s *SwaggerPetstoreAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	s.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SwaggerPetstoreAPI
func (s *SwaggerPetstoreAPI) Validate() error {
	var unregistered []string

	if s.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if s.XMLConsumer == nil {
		unregistered = append(unregistered, "XMLConsumer")
	}

	if s.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if s.XMLProducer == nil {
		unregistered = append(unregistered, "XMLProducer")
	}

	if s.APIKeyAuth == nil {
		unregistered = append(unregistered, "APIKeyAuth")
	}

	if s.AddPetHandler == nil {
		unregistered = append(unregistered, "AddPetHandler")
	}

	if s.CreateUserHandler == nil {
		unregistered = append(unregistered, "CreateUserHandler")
	}

	if s.CreateUsersWithArrayInputHandler == nil {
		unregistered = append(unregistered, "CreateUsersWithArrayInputHandler")
	}

	if s.LogoutUserHandler == nil {
		unregistered = append(unregistered, "LogoutUserHandler")
	}

	if s.UpdateUserHandler == nil {
		unregistered = append(unregistered, "UpdateUserHandler")
	}

	if s.FindPetsByStatusHandler == nil {
		unregistered = append(unregistered, "FindPetsByStatusHandler")
	}

	if s.LoginUserHandler == nil {
		unregistered = append(unregistered, "LoginUserHandler")
	}

	if s.GetPetByIDHandler == nil {
		unregistered = append(unregistered, "GetPetByIDHandler")
	}

	if s.GetOrderByIDHandler == nil {
		unregistered = append(unregistered, "GetOrderByIDHandler")
	}

	if s.GetUserByNameHandler == nil {
		unregistered = append(unregistered, "GetUserByNameHandler")
	}

	if s.DeletePetHandler == nil {
		unregistered = append(unregistered, "DeletePetHandler")
	}

	if s.DeleteUserHandler == nil {
		unregistered = append(unregistered, "DeleteUserHandler")
	}

	if s.UpdatePetHandler == nil {
		unregistered = append(unregistered, "UpdatePetHandler")
	}

	if s.CreateUsersWithListInputHandler == nil {
		unregistered = append(unregistered, "CreateUsersWithListInputHandler")
	}

	if s.PlaceOrderHandler == nil {
		unregistered = append(unregistered, "PlaceOrderHandler")
	}

	if s.UpdatePetWithFormHandler == nil {
		unregistered = append(unregistered, "UpdatePetWithFormHandler")
	}

	if s.FindPetsByTagsHandler == nil {
		unregistered = append(unregistered, "FindPetsByTagsHandler")
	}

	if s.DeleteOrderHandler == nil {
		unregistered = append(unregistered, "DeleteOrderHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (s *SwaggerPetstoreAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return s.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (s *SwaggerPetstoreAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {

	result := make(map[string]httpkit.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "apiKey":

			result[name] = security.APIKeyAuth(scheme.Name, scheme.In, func(tok string) (interface{}, error) { return s.APIKeyAuth(tok) })

		}
	}
	return result

}

// ConsumersFor gets the consumers for the specified media types
func (s *SwaggerPetstoreAPI) ConsumersFor(mediaTypes []string) map[string]httpkit.Consumer {

	result := make(map[string]httpkit.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = s.JSONConsumer

		case "application/xml":
			result["application/xml"] = s.XMLConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (s *SwaggerPetstoreAPI) ProducersFor(mediaTypes []string) map[string]httpkit.Producer {

	result := make(map[string]httpkit.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = s.JSONProducer

		case "application/xml":
			result["application/xml"] = s.XMLProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation id
func (s *SwaggerPetstoreAPI) HandlerFor(operationID string) (http.Handler, bool) {
	if s.handlers == nil {
		return nil, false
	}
	h, ok := s.handlers[operationID]
	return h, ok
}

func (s *SwaggerPetstoreAPI) initHandlerCache() {
	if s.context == nil {
		s.context = middleware.NewRoutableContext(s.spec, s, nil)
	}

	s.handlers = make(map[string]http.Handler)

	s.handlers["addPet"] = pet.NewAddPet(s.context, s.AddPetHandler)

	s.handlers["createUser"] = user.NewCreateUser(s.context, s.CreateUserHandler)

	s.handlers["createUsersWithArrayInput"] = user.NewCreateUsersWithArrayInput(s.context, s.CreateUsersWithArrayInputHandler)

	s.handlers["logoutUser"] = user.NewLogoutUser(s.context, s.LogoutUserHandler)

	s.handlers["updateUser"] = user.NewUpdateUser(s.context, s.UpdateUserHandler)

	s.handlers["findPetsByStatus"] = pet.NewFindPetsByStatus(s.context, s.FindPetsByStatusHandler)

	s.handlers["loginUser"] = user.NewLoginUser(s.context, s.LoginUserHandler)

	s.handlers["getPetById"] = pet.NewGetPetByID(s.context, s.GetPetByIDHandler)

	s.handlers["getOrderById"] = store.NewGetOrderByID(s.context, s.GetOrderByIDHandler)

	s.handlers["getUserByName"] = user.NewGetUserByName(s.context, s.GetUserByNameHandler)

	s.handlers["deletePet"] = pet.NewDeletePet(s.context, s.DeletePetHandler)

	s.handlers["deleteUser"] = user.NewDeleteUser(s.context, s.DeleteUserHandler)

	s.handlers["updatePet"] = pet.NewUpdatePet(s.context, s.UpdatePetHandler)

	s.handlers["createUsersWithListInput"] = user.NewCreateUsersWithListInput(s.context, s.CreateUsersWithListInputHandler)

	s.handlers["placeOrder"] = store.NewPlaceOrder(s.context, s.PlaceOrderHandler)

	s.handlers["updatePetWithForm"] = pet.NewUpdatePetWithForm(s.context, s.UpdatePetWithFormHandler)

	s.handlers["findPetsByTags"] = pet.NewFindPetsByTags(s.context, s.FindPetsByTagsHandler)

	s.handlers["deleteOrder"] = store.NewDeleteOrder(s.context, s.DeleteOrderHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve())
func (s *SwaggerPetstoreAPI) Serve() http.Handler {
	if len(s.handlers) == 0 {
		s.initHandlerCache()
	}

	return s.context.APIHandler()
}

package pet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/vikstrous/go-swagger/examples/generated/models"
	"github.com/vikstrous/go-swagger/httpkit/middleware"
)

// GetPetByIDHandlerFunc turns a function with the right signature into a get pet by i d handler
type GetPetByIDHandlerFunc func(GetPetByIDParams, *models.User) (*models.Pet, error)

func (fn GetPetByIDHandlerFunc) Handle(params GetPetByIDParams, principal *models.User) (*models.Pet, error) {
	return fn(params, principal)
}

// GetPetByIDHandler interface for that can handle valid get pet by i d params
type GetPetByIDHandler interface {
	Handle(GetPetByIDParams, *models.User) (*models.Pet, error)
}

// NewGetPetByID creates a new http.Handler for the get pet by i d operation
func NewGetPetByID(ctx *middleware.Context, handler GetPetByIDHandler) *GetPetByID {
	return &GetPetByID{Context: ctx, Handler: handler}
}

// GetPetByID Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
type GetPetByID struct {
	Context *middleware.Context
	Params  GetPetByIDParams
	Handler GetPetByIDHandler
}

func (o *GetPetByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // it's ok this is really a models.User
	}

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res, err := o.Handler.Handle(o.Params, principal) // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	o.Context.Respond(rw, r, route.Produces, route, res)

}

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/vikstrous/go-swagger/httpkit/middleware"
)

// CreateUsersWithArrayInputHandlerFunc turns a function with the right signature into a create users with array input handler
type CreateUsersWithArrayInputHandlerFunc func(CreateUsersWithArrayInputParams) error

func (fn CreateUsersWithArrayInputHandlerFunc) Handle(params CreateUsersWithArrayInputParams) error {
	return fn(params)
}

// CreateUsersWithArrayInputHandler interface for that can handle valid create users with array input params
type CreateUsersWithArrayInputHandler interface {
	Handle(CreateUsersWithArrayInputParams) error
}

// NewCreateUsersWithArrayInput creates a new http.Handler for the create users with array input operation
func NewCreateUsersWithArrayInput(ctx *middleware.Context, handler CreateUsersWithArrayInputHandler) *CreateUsersWithArrayInput {
	return &CreateUsersWithArrayInput{Context: ctx, Handler: handler}
}

// CreateUsersWithArrayInput
type CreateUsersWithArrayInput struct {
	Context *middleware.Context
	Params  CreateUsersWithArrayInputParams
	Handler CreateUsersWithArrayInputHandler
}

func (o *CreateUsersWithArrayInput) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)

	if err := o.Context.BindValidRequest(r, route, &o.Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	err := o.Handler.Handle(o.Params) // actually handle the request
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	o.Context.Respond(rw, r, route.Produces, route, nil)

}
